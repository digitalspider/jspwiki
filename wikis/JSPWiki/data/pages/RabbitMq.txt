
[http://www.rabbitmq.com/]
[http://www.rabbitmq.com/tutorials/amqp-concepts.html]

!!Overview

The Queue Mechanism in the Analytics project ensure that there is asynchronous ability to place items into the queue at a rapid rate. Items are read from the queue at the backend and updated into the database.

There are various possible implementations of the queue that are possible, including:
* Java Queue class - which does not handle persistance and is lost on server restart
* Memcache Queue - which seems to fail at some point when using load testing
* Rabbit MQ - still to be tested

!Memcache

To run the memcache queuing mechanism, an the queue application needs to run on port 11211. This application can be found in the source code under:
{{{
etc\memcache\memcached-1.4.5(W32).exe
}}}
This starts a command prompt which the memcache mechanism in Tomcat can connect to. Tomcat configuration for this is found in the file:
{{{
    C:\applications\config\analytics.properties

cache.memcached.servers=localhost:11211

## Other parameters - found in QueueParameters.java
## queue.local.blocksize=500
## queue.local.maxsize=20000
## queue.local.maxwaitingsecond=5
## queue.remote.threadno=2
## queue.remote.blockingthreadno=3
## queue.key=ap
}}}

Memcache Queue has two components: Local queue and Remote queue.

The first implementation of Remote queue is using memcached to store entries and it will store recover information into C:\applications\config\remotequeuelog folder in case of restart of Tomcat server.

If memcached restart we need to clear this folder manually.

Rabbit MQ
!!Installing on Windows

The following two files need to be installed
* [http://www.erlang.org/download.html]   (R16B Windows Binary File (89.6 MB))
* [http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.1/rabbitmq-server-3.1.1.exe]

!!Installing on Linux

Sources:
* [http://binaries.erlang-solutions.com/rpm/centos/]
* [http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.1/]

Go to the Centos server and follow the instructions here:
* [http://www.rabbitmq.com/install-rpm.html]
* [http://blog.jimjose.in/2012/04/installing-rabbitmq-2-8-with-erlang-r15b-on-centos6/]

Start by installing erlang:
{{{
wget -O /etc/yum.repos.d/erlang.repo [http://binaries.erlang-solutions.com/rpm/centos/erlang_solutions.repo]
yum install esl-erlang
yum list esl-erlang
}}}

output will be like as following line
{{{
Installed Packages
esl-erlang.x86_64        R15B03-2            @erlang-solutions
}}}

Use the following lines to install the RabbitMQ package rabbitmq-server-3.1.1-1.noarch.rpm
{{{
cd Downloads
rpm --import [http://www.rabbitmq.com/rabbitmq-signing-key-public.asc]
yum install rabbitmq-server-3.1.1-1.noarch.rpm
// This complains about a dependency so you can use the below line
rpm --nodeps -Uvh rabbitmq-server-3.1.1-1.noarch.rpm
}}}
To start the server use:
{{{
chkconfig rabbitmq-server on

service rabbitmq-server start
service rabbitmq-server stop

rabbitmqctl status
}}}
To check the queue length use:
{{{
rabbitmqctl list_queues name messages_ready messages_unacknowledged
}}}

!!Error on Linux

The installation of this queue seems to be problematic, as it reaches a point in time, where the queue reader stops reading. This is caused by the line in the RabbitMQReader class, which seems to never respond.
{{{
QueueingConsumer.Delivery delivery = consumer.nextDelivery();
}}}
The documentation for this is here:
* [http://www.rabbitmq.com/releases/rabbitmq-java-client/v3.1.1/rabbitmq-java-client-javadoc-3.1.1/com/rabbitmq/client/QueueingConsumer.html]

However it seems to be related to the 64-bit version of the application. Further investigation is needed.

GREAT NEWS: The problem here was related to the fact that the server ran out of Disk Space, due to the apache logs filling up. Once this was cleared RabbitMQ worked very well.
Monitoring
* [http://blog.monitis.com/index.php/2012/10/17/how-i-built-a-monitor-for-rabbitmq/]
* [http://www.rabbitmq.com/management.html]

!!Configuration
The following configuration should also be added to the following file:
* C:\applications\config\analytics.properties
{{{
cache.memcached.servers=localhost:11211

queue.read.enable=0
summarydata.enable=0
smtp.enabled=0
lasoo.datamap.filename=C:/lasooDataMap.ser
threads.number=4
db.engine.type=TokuDB

queue.type=rabbitmq
rabbitmq.server=10.103.34.181

## Other parameters - found in QueueParameters.java
## queue.local.blocksize=500
## queue.local.maxsize=20000
## queue.local.maxwaitingsecond=5
## queue.remote.threadno=2
## queue.remote.blockingthreadno=3
## queue.key=ap
}}}

RabbitMQ Clustering
!!Plug-ins

We have added RabbitMQ Management Plugin so that we can monitor things graphically
[http://www.rabbitmq.com/management.html]

!Installation

The management plugin is included in the RabbitMQ distribution. To enable it, use rabbitmq-plugins:
{{{
rabbitmq-plugins enable rabbitmq_management
service rabbitmq-server stop
service rabbitmq-server start
}}}
!Usage
|| URL	|| [http://learn01-ultimo.lasoo.net:15672/]
| Username | guest
| Password | guest

!JMeter Performance Testing results
Configurations

!Server Configurations
{{{
    2 Linux 64-bit servers
    4 threads per server
    1 rabbitMQ running on one of the servers
    1 DB - 1million records = 400MB
}}}
!Client Configurations
{{{
    Using JMeter with the following parameters
    50 concurrent threads
    10,000 iterations
}}}
!Results
{{{
    Final DB track_activity count = 2,539,260
    Final DB size = 962MB
    Errors = 0%
    Throughput = 1830writes/sec
}}}
More DB resutls from LEARNDB01 (Live Analytics server)
{{{
    Final DB track_activity count = 8,913,608
    Final DB size = 7,674MB
    Track_Activity Table size = 2,654MB
    summary_offer_raw Table size = 3,057MB (can be deleted)
    summary_offer Table size = 876MB
}}}
{{{
mysql> select count(1) from track_activity;
+----------+
| count(1) |
+----------+
| 40905780 |
+----------+
1 row in set (4 min 15.22 sec)

35656128 - in 277.339s
}}}

!!!Clustering
We can change the type of a node from ram to disk and vice versa. To do that we simply stop the RabbitMQ application, change the type with an appropriate cluster command, and restart the application.
To join a node on the cluster as a RAM node:
{{{
sudo rabbitmqctl join_cluster --ram rabbit@rabbit1
}}}
To change the local cluster node to another type (back to disc):
{{{
sudo rabbitmqctl stop_app sudo rabbitmqctl change_cluster_node_type disc sudo rabbitmqctl start_app
}}}
Alternatively, to change a disc node to a ram node:
{{{
sudo rabbitmqctl stop_app sudo rabbitmqctl change_cluster_node_type ram sudo rabbitmqctl start_app 
}}}
Config file:
{{{
vi /var/lib/rabbitmq/mnesia/rabbit\@prev01-ultimo/cluster_nodes.config
}}}
{{{
[{rabbit,
  [{cluster_nodes, {['rabbit@rabbit1', 'rabbit@rabbit2', 'rabbit@rabbit3'], disc}}]}]
}}}
